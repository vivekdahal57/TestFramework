package com.vh.mi.automation.test.comp;import com.vh.mi.automation.api.comp.bl.BL;import com.vh.mi.automation.api.comp.bl.IBusinessLevelSelectionComponent;import com.vh.mi.automation.api.comp.bl.IBusinessLevelSelectionComponent.ISelectionGridContainer;import com.vh.mi.automation.api.comp.bl.IBusinessLevelsComponent;import com.vh.mi.automation.api.comp.bl.IBusinessLevelsComponent.IBusinessLevel.IViewSelected;import com.vh.mi.automation.api.comp.dataGrid.IDataGrid;import com.vh.mi.automation.api.constants.TimeOuts;import com.vh.mi.automation.impl.comp.pagination.PaginationComponentFacade;import com.vh.mi.automation.test.base.BaseTest;import com.vh.mi.automation.test.utils.AssertionUtils;import com.vh.mi.automation.test.utils.DataProviderUtils;import com.vh.mi.automation.test.utils.TestUtils;import org.fest.assertions.Assertions;import org.testng.ITestResult;import org.testng.SkipException;import org.testng.annotations.AfterMethod;import org.testng.annotations.DataProvider;import org.testng.annotations.Test;import java.lang.annotation.Retention;import java.lang.annotation.Target;import java.util.ArrayList;import java.util.List;import java.util.Map;import static java.lang.annotation.ElementType.METHOD;import static java.lang.annotation.RetentionPolicy.RUNTIME;import static org.fest.assertions.Assertions.assertThat;/** * Abstract Tests for BusinessLevels Component * * @author nimanandhar */public abstract class AbstractBLCompTest extends BaseTest {    private IBusinessLevelsComponent businessLevelsComponent;    private IDataGrid dataGrid;    @Retention(RUNTIME)    @Target({METHOD})    private @interface RequiresReset {    }    public void setUp() {        super.setUp();        initializePage();        businessLevelsComponent = getBusinessLevelsComponent();        dataGrid = getDataGrid();    }    protected abstract void initializePage();    protected abstract IBusinessLevelsComponent getBusinessLevelsComponent();    protected abstract IDataGrid getDataGrid();    @AfterMethod    public void resetSelectionAfterEachTest(ITestResult testResult) {        if (TestUtils.containsAnnotation(testResult.getMethod(), RequiresReset.class)) {            businessLevelsComponent.doResetSelections();        }    }    @Test    public void testThatNumberOfBusinessLevelIsBetweenOneAndSix() {        assertThat(businessLevelsComponent.getMaxLevels())                .as("Business Levels count should be between 1 and 6")                .isGreaterThanOrEqualTo(1)                .isLessThanOrEqualTo(6);    }    @Test(dataProvider = "availableBusinessLevelProvider")    public void testThatLabelOfBusinessLevelsIsNonEmpty(BL bl) {        assertThat(businessLevelsComponent.getBusinessLevelComponent(bl).getLabel()).isNotEmpty();    }    @Test(description = "Test that labels of business level in Selection Component is same as that" +            "in Business Levels Component.")    @RequiresReset    public void labelsMatchingTest() {        businessLevelsComponent.doResetSelections();        IBusinessLevelSelectionComponent selectionComp = businessLevelsComponent.getBusinessLevelComponent(BL.LEVEL1).doOpenSelection();        Map<BL, String> selectionComponentLabels = selectionComp.getReadOnlyContainer().getLabelTexts();        selectionComp.doClose();        for (BL bl : selectionComponentLabels.keySet()) {            assertThat(businessLevelsComponent.getBusinessLevelComponent(bl).getLabel()).isEqualTo(selectionComponentLabels.get(bl));        }    }    @Test(dataProvider = "availableBusinessLevelProvider")    @RequiresReset    public void testThatSelectionComponentTitleIsCorrect(BL bl) {        IBusinessLevelsComponent.IBusinessLevel businessLevel = businessLevelsComponent.getBusinessLevelComponent(bl);        businessLevelsComponent.doResetSelections();        IBusinessLevelSelectionComponent selectionComponent = businessLevel.doOpenSelection();        String displayedTitle = selectionComponent.getDisplayedTitle();        selectionComponent.doClose();        ISelectionGridContainer selectionGridContainer = selectionComponent.getSelectionGridContainer();        if (selectionGridContainer.isRadioButtonComponentVisible()) {            assertThat(displayedTitle).isEqualTo("Selection for " + businessLevel.getLabel());        } else {            assertThat(displayedTitle).isEqualTo("Multiple Selection for " + businessLevel.getLabel());        }    }    @Test(dataProvider = "availableBusinessLevelProvider", description = "Test that when single option is " +            "checked in Selection Component the same selection is visible in label.")    @RequiresReset    public void selectedOptionVisibilityInLabelTest(BL bl) {        IBusinessLevelsComponent.IBusinessLevel businessLevelComponent = businessLevelsComponent.getBusinessLevelComponent(bl);        businessLevelsComponent.doResetSelections();        IBusinessLevelSelectionComponent selectionComponent = businessLevelComponent.doOpenSelection();        ISelectionGridContainer selectionGridContainer = selectionComponent.getSelectionGridContainer();        //since businessLevels are reset before each test, no options should be checked        assertThat(selectionGridContainer.getCheckedOptionsOnCurrentPage()).isEmpty();        String firstOption = selectionGridContainer.getSelectionOptionsOnCurrentPage().get(0);        if (selectionGridContainer.isRadioButtonComponentVisible()){            selectionComponent.doClose();        } else {            selectionGridContainer.doCheckOption(firstOption);            selectionComponent.doApply();            //since we have checked only one option that option should be displayed in the business level component            //and the 'View Selected' Component should not be visible            assertThat(businessLevelComponent.getSelected()).isEqualTo(firstOption);            assertThat(businessLevelComponent.isViewSelectedComponentVisible()).isFalse();            //when we reopen the selection component, the previously checked option should still be checked            selectionComponent = businessLevelComponent.doOpenSelection();            List<String> checkedOptions = selectionComponent.getSelectionGridContainer().getCheckedOptionsOnCurrentPage();            selectionComponent.doClose();            assertThat(checkedOptions).containsOnly(firstOption);        }    }    @Test(dataProvider = "availableBusinessLevelProvider", description = "Test that when multiple option is" +            "checked in selection, component selected is displayed")    @RequiresReset    public void multipleOptionSelectionFunctionalityTest(BL bl) {        IBusinessLevelsComponent.IBusinessLevel businessLevelComponent = businessLevelsComponent.getBusinessLevelComponent(bl);        businessLevelsComponent.doResetSelections();        IBusinessLevelSelectionComponent selectionComponent = businessLevelComponent.doOpenSelection();        ISelectionGridContainer selectionGridContainer = selectionComponent.getSelectionGridContainer();        //since businessLevels are reset before each test, no options should be checked        selectionGridContainer.getCheckedOptionsOnCurrentPage().isEmpty();        List<String> selectionOptionsOnCurrentPage = selectionGridContainer.getSelectionOptionsOnCurrentPage();        int numberOfOptionsOnPage = selectionOptionsOnCurrentPage.size();        if (numberOfOptionsOnPage < 2) {            selectionComponent.doClose();            throw new SkipException("Less than 2 options for business Level. Cannot select multiple options ");        }        if (selectionGridContainer.isRadioButtonComponentVisible()){            assertThat(selectionGridContainer.isRadioButtonComponentSelected()).isTrue();            selectionComponent.doClose();        } else {            selectionGridContainer.doChooseMenuSelectAllOnPage();            selectionComponent.doApply();            //since we have checked multiple options the business level should display 'Selected;            //and the 'View Selected' Component should be visible            assertThat(businessLevelComponent.getSelected()).isEqualTo("Selected");            assertThat(businessLevelComponent.isViewSelectedComponentVisible()).isTrue();            IViewSelected viewSelected = businessLevelComponent.doOpenViewSelected();            List<String> selectedItemsInViewSelectedComponent = viewSelected.getSelectedItems();            viewSelected.doClose();            AssertionUtils.assertThatCollectionsContainSameElements(selectedItemsInViewSelectedComponent, selectionOptionsOnCurrentPage);        }    }    @Test    @RequiresReset    public void testThatDataGridChangesOnBusinessLevelSelection() {        if (dataGrid == null) {            throw new SkipException("Skipping test because dataGrid was not available");        }        for (IBusinessLevelsComponent.IBusinessLevel businessLevelComponent : businessLevelsComponent.getBusinessLevels()) {            businessLevelsComponent.doResetSelections();            IBusinessLevelSelectionComponent blSelectionComponent = businessLevelComponent.doOpenSelection();            List<String> businessLevelSelections = blSelectionComponent.getSelectionGridContainer().getSelectionOptionsOnCurrentPage();            if (businessLevelSelections.size() < 2) {                //Cannot check that data changes when selecting business Level if there is only one business Level                blSelectionComponent.doClose();                continue;            }            String tableDataBeforeSelection = dataGrid.getTableDataAsText();            if (blSelectionComponent.getSelectionGridContainer().isRadioButtonComponentVisible()){                blSelectionComponent.getSelectionGridContainer().doCheckRadioOption(businessLevelSelections.get(1));            } else {                blSelectionComponent.getSelectionGridContainer().doCheckOption(businessLevelSelections.get(0));            }                blSelectionComponent.doApply();                Assertions.assertThat(tableDataBeforeSelection).isNotEqualTo(dataGrid.getTableDataAsText());                businessLevelsComponent.doResetSelections();            }    }    @Test(dataProvider = "availableBusinessLevelProvider", description = "Select All should check all options" +            "in BL Selection Component and all selected options should be selected in View Selected Component.")    @RequiresReset    public void selectAllFunctionalityTest(BL bl) {        businessLevelsComponent.doResetSelections();        IBusinessLevelSelectionComponent blSelectionComponent = businessLevelsComponent.getBusinessLevelComponent(bl).doOpenSelection();        PaginationComponentFacade paginationComponent = new PaginationComponentFacade(blSelectionComponent.getPaginationComponent());        if (paginationComponent.getTotalRecords() < 2 || paginationComponent.getTotalPages() > 5) {            blSelectionComponent.doClose();            businessLevelsComponent.doWaitTillFullyLoaded(TimeOuts.FIVE_SECONDS);            throw new SkipException("Not testing because there is only a single record or there are more than 5 pages");        }        ISelectionGridContainer selectionGridContainer = blSelectionComponent.getSelectionGridContainer();        if (selectionGridContainer.isRadioButtonComponentVisible()){            blSelectionComponent.doClose();        } else {            selectionGridContainer.doChooseMenuSelectAll();            List<String> checkedOptionsInBLSelectionComponent = new ArrayList<>();            do {                checkedOptionsInBLSelectionComponent.addAll(selectionGridContainer.getCheckedOptionsOnCurrentPage());            } while (paginationComponent.nextPage());            blSelectionComponent.doApply();            IViewSelected viewSelectedComponent = businessLevelsComponent.getBusinessLevelComponent(bl).doOpenViewSelected();            assertThat(businessLevelsComponent.getBusinessLevelComponent(bl).isViewSelectedComponentVisible()).isTrue();            List<String> selectedItemsInViewSelectedComponent = viewSelectedComponent.getSelectedItems();            viewSelectedComponent.doClose();            assertThat(checkedOptionsInBLSelectionComponent).containsOnly(selectedItemsInViewSelectedComponent.toArray());        }    }    @DataProvider()    public Object[][] availableBusinessLevelProvider() {        List<BL> availableBLs = new ArrayList<>();        for (int i = 1; i <= businessLevelsComponent.getMaxLevels(); i++) {            availableBLs.add(BL.get(i));        }        return DataProviderUtils.getObjects(availableBLs);    }}